"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CiphService = void 0;
var url = require("url");
var got_1 = require("got");
var querystring = require("querystring");
var jsVarStr = '[a-zA-Z_\\$][a-zA-Z_0-9]*';
var jsSingleQuoteStr = "'[^'\\\\]*(:?\\\\[\\s\\S][^'\\\\]*)*'";
var jsDoubleQuoteStr = "\"[^\"\\\\]*(:?\\\\[\\s\\S][^\"\\\\]*)*\"";
var jsQuoteStr = "(?:" + jsSingleQuoteStr + "|" + jsDoubleQuoteStr + ")";
var jsKeyStr = "(?:" + jsVarStr + "|" + jsQuoteStr + ")";
var jsPropStr = "(?:\\." + jsVarStr + "|\\[" + jsQuoteStr + "\\])";
var jsEmptyStr = "(?:''|\"\")";
var reverseStr = ':function\\(a\\)\\{' +
    '(?:return )?a\\.reverse\\(\\)' +
    '\\}';
var sliceStr = ':function\\(a,b\\)\\{' +
    'return a\\.slice\\(b\\)' +
    '\\}';
var spliceStr = ':function\\(a,b\\)\\{' +
    'a\\.splice\\(0,b\\)' +
    '\\}';
var swapStr = ':function\\(a,b\\)\\{' +
    'var c=a\\[0\\];a\\[0\\]=a\\[b(?:%a\\.length)?\\];a\\[b(?:%a\\.length)?\\]=c(?:;return a)?' +
    '\\}';
var actionsObjRegexp = new RegExp("var (" + jsVarStr + ")=\\{((?:(?:" +
    jsKeyStr + reverseStr + '|' +
    jsKeyStr + sliceStr + '|' +
    jsKeyStr + spliceStr + '|' +
    jsKeyStr + swapStr +
    '),?\\r?\\n?)+)\\};');
var actionsFuncRegexp = new RegExp("function(?: " + jsVarStr + ")?\\(a\\)\\{" +
    ("a=a\\.split\\(" + jsEmptyStr + "\\);\\s*") +
    ("((?:(?:a=)?" + jsVarStr) +
    jsPropStr +
    '\\(a,\\d+\\);)+)' +
    ("return a\\.join\\(" + jsEmptyStr + "\\)") +
    '\\}');
var reverseRegexp = new RegExp("(?:^|,)(" + jsKeyStr + ")" + reverseStr, 'm');
var sliceRegexp = new RegExp("(?:^|,)(" + jsKeyStr + ")" + sliceStr, 'm');
var spliceRegexp = new RegExp("(?:^|,)(" + jsKeyStr + ")" + spliceStr, 'm');
var swapRegexp = new RegExp("(?:^|,)(" + jsKeyStr + ")" + swapStr, 'm');
var CiphService = /** @class */ (function () {
    function CiphService() {
        this.cache = new Map();
        this.decipher = function (tokens, sig) {
            sig = sig.split('');
            for (var i = 0, len = tokens.length; i < len; i++) {
                // tslint:disable-next-line:prefer-const one-variable-per-declaration
                var token = tokens[i], pos = void 0;
                switch (token[0]) {
                    case 'r':
                        sig = sig.reverse();
                        break;
                    case 'w':
                        // tslint:disable-next-line:no-bitwise
                        pos = ~~token.slice(1);
                        var first = sig[0];
                        sig[0] = sig[pos % sig.length];
                        sig[pos] = first;
                        break;
                    case 's':
                        // tslint:disable-next-line:no-bitwise
                        pos = ~~token.slice(1);
                        sig = sig.slice(pos);
                        break;
                    case 'p':
                        // tslint:disable-next-line:no-bitwise
                        pos = ~~token.slice(1);
                        sig.splice(0, pos);
                        break;
                }
            }
            return sig.join('');
        };
    }
    CiphService.prototype.getTokens = function (html5playerfile) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedTokens, response, tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedTokens = this.cache.get(html5playerfile);
                        if (!cachedTokens) return [3 /*break*/, 1];
                        return [2 /*return*/, cachedTokens];
                    case 1: return [4 /*yield*/, got_1.default.get(html5playerfile, {})];
                    case 2:
                        response = _a.sent();
                        tokens = this.extractActions(response.body);
                        if (!tokens || !tokens.length) {
                            throw new Error('Could not extract signature deciphering actions');
                        }
                        this.cache.set(html5playerfile, tokens);
                        return [2 /*return*/, tokens];
                }
            });
        });
    };
    CiphService.prototype.extractActions = function (body) {
        var objResult = actionsObjRegexp.exec(body);
        var funcResult = actionsFuncRegexp.exec(body);
        if (!objResult || !funcResult) {
            return null;
        }
        var obj = objResult[1].replace(/\$/g, '\\$');
        var objBody = objResult[2].replace(/\$/g, '\\$');
        var funcBody = funcResult[1].replace(/\$/g, '\\$');
        var result = reverseRegexp.exec(objBody);
        var reverseKey = result && result[1]
            .replace(/\$/g, '\\$')
            .replace(/\$|^'|^"|'$|"$/g, '');
        result = sliceRegexp.exec(objBody);
        var sliceKey = result && result[1]
            .replace(/\$/g, '\\$')
            .replace(/\$|^'|^"|'$|"$/g, '');
        result = spliceRegexp.exec(objBody);
        var spliceKey = result && result[1]
            .replace(/\$/g, '\\$')
            .replace(/\$|^'|^"|'$|"$/g, '');
        result = swapRegexp.exec(objBody);
        var swapKey = result && result[1]
            .replace(/\$/g, '\\$')
            .replace(/\$|^'|^"|'$|"$/g, '');
        var keys = "(" + [reverseKey, sliceKey, spliceKey, swapKey].join('|') + ")";
        var myreg = '(?:a=)?' + obj +
            ("(?:\\." + keys + "|\\['" + keys + "'\\]|\\[\"" + keys + "\"\\])") +
            '\\(a,(\\d+)\\)';
        var tokenizeRegexp = new RegExp(myreg, 'g');
        var tokens = [];
        // tslint:disable-next-line:no-conditional-assignment
        while ((result = tokenizeRegexp.exec(funcBody)) !== null) {
            var key = result[1] || result[2] || result[3];
            switch (key) {
                case swapKey:
                    tokens.push('w' + result[4]);
                    break;
                case reverseKey:
                    tokens.push('r');
                    break;
                case sliceKey:
                    tokens.push('s' + result[4]);
                    break;
                case spliceKey:
                    tokens.push('p' + result[4]);
                    break;
            }
        }
        return tokens;
    };
    CiphService.prototype.decipherFormats = function (formats, tokens, debug) {
        var _this = this;
        formats.forEach(function (format) {
            var cipher = format.signatureCipher || format.cipher;
            if (cipher) {
                Object.assign(format, querystring.parse(cipher));
                delete format.signatureCipher;
                delete format.cipher;
            }
            var sig = tokens && format.s ? _this.decipher(tokens, format.s) : null;
            _this.setDownloadURL(format, sig, debug);
        });
    };
    CiphService.prototype.setDownloadURL = function (format, sig, debug) {
        var decodedUrl;
        if (format.url) {
            decodedUrl = format.url;
        }
        else {
            if (debug) {
                // tslint:disable-next-line:no-console
                console.warn('Download url not found for itag ' + format.itag);
            }
            return;
        }
        try {
            decodedUrl = decodeURIComponent(decodedUrl);
        }
        catch (err) {
            if (debug) {
                // tslint:disable-next-line:no-console
                console.warn('Could not decode url: ' + err.message);
            }
            return;
        }
        // Make some adjustments to the final url.
        var parsedUrl = url.parse(decodedUrl, true);
        // Deleting the `search` part is necessary otherwise changes to
        // `query` won't reflect when running `url.format()`
        // @ts-ignore
        delete parsedUrl.search;
        var query = parsedUrl.query;
        // This is needed for a speedier download.
        // See https://github.com/fent/node-ytdl-core/issues/127
        query.ratebypass = 'yes';
        if (sig) {
            // When YouTube provides a `sp` parameter the signature `sig` must go
            // into the parameter it specifies.
            // See https://github.com/fent/node-ytdl-core/issues/417
            if (format.sp) {
                query[format.sp] = sig;
            }
            else {
                query.signature = sig;
            }
        }
        format.url = url.format(parsedUrl);
    };
    return CiphService;
}());
exports.CiphService = CiphService;
