"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.searchVideo = void 0;
var got_1 = require("got");
var tube_service_1 = require("./tube.service");
var cip_service_1 = require("./cip.service");
var cver = '2.20210622.10.00';
var mergeFormats = function (info, formatsMap) {
    info.formats.forEach(function (f) {
        formatsMap[f.itag] = f;
    });
    info.formats = Object.values(formatsMap);
};
function searchVideo(youtubeId) {
    return __awaiter(this, void 0, void 0, function () {
        var tubeService, ciphService, params, watchPageURL, ytApi, response, body, info, playErr, infoResponse;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tubeService = new tube_service_1.YTubeService();
                    ciphService = new cip_service_1.CiphService();
                    params = '?hl=en';
                    watchPageURL = tubeService.VIDEO_URL + youtubeId + params;
                    ytApi = watchPageURL + "&pbj=1";
                    return [4 /*yield*/, got_1.default.get(ytApi, { headers: {
                                'x-youtube-client-name': '1',
                                'x-youtube-client-version': cver,
                                //  'x-youtube-identity-token': '',
                            } })];
                case 1:
                    response = _a.sent();
                    body = response.body;
                    try {
                        info = JSON.parse(body).reduce(function (part, curr) { return Object.assign(curr, part); }, {});
                    }
                    catch (err) {
                        throw Error("Error parsing info: " + err.message);
                    }
                    playErr = tubeService.playError(info, 'ERROR');
                    if (playErr) {
                        throw playErr;
                    }
                    return [4 /*yield*/, tubeService.gotConfig(youtubeId, null, info, cver)];
                case 2:
                    infoResponse = _a.sent();
                    return [2 /*return*/, infoResponse
                        /* if (infoResponse.formats.length > 0) {
                           const html5playerfile = urllib.resolve(tubeService.VIDEO_URL, infoResponse.html5player);
                           const tokens = await ciphService.getTokens(html5playerfile);
                       
                           ciphService.decipherFormats(infoResponse.formats, tokens, false);
                           const funcs: any[] = [];
                       
                           tubeService.parallel(funcs, (err: any, results: any) => {
                             if (results[0]) { mergeFormats(infoResponse, results[0]); }
                             if (results[1]) { mergeFormats(infoResponse, results[1]); }
                       
                             infoResponse.full = true;
                           });
                           return infoResponse;
                         } else {
                           return null;
                         }*/
                    ];
            }
        });
    });
}
exports.searchVideo = searchVideo;
